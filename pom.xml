<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.example</groupId>
	<artifactId>springboot-library-api-app</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>springboot-library-api-app</name>
	<description>Demo project for Spring Library REST API and App</description>

	<properties>
		<java.version>17</java.version>
		<jacoco.version>0.8.12</jacoco.version>
		<doxygen.config.file>${basedir}/src/main/resources/Doxyfile</doxygen.config.file>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<sonar.organization>unaguil</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
	</properties>

	<dependencies>
		<!-- Spring Boot Starter Data JPA (includes Hibernate) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- MySQL Driver (Specify Version) -->
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.33</version> <!-- Ensure this is the latest version -->
		</dependency>

		<!-- Hibernate Core (Specify Version) -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>6.6.5.Final</version> <!-- Use version compatible with Spring Boot 3 -->
		</dependency>

		<!-- Spring Boot Starter Web (if using REST APIs) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JPA API Dependency -->
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
			<version>3.1.0</version> <!-- Check for the latest version -->
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.3.0</version> <!-- Check latest version -->
		</dependency>

		<!-- <dependency>
			<groupId>com.github.noconnor</groupId>
			<artifactId>junitperf</artifactId>
			<version>1.18.0</version>
			<scope>test</scope>
		</dependency> -->

		<dependency>
			<groupId>com.github.noconnor</groupId>
			<artifactId>junitperf-junit5</artifactId>
			<version>1.37.0</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.5.2</version>
				</plugin>

				<plugin>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>3.5.2</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.3.2</version> <!-- or latest stable -->
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/docs</directory> <!-- The docs/ folder you want to remove -->
							<includes>
								<include>**/*</include> <!-- Remove everything inside -->
							</includes>
							<followSymlinks>false</followSymlinks> <!-- Optional, safety for symlinks -->
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!-- Required to allow VisualVM profiler connection -->
					<jvmArguments>-Xverify:none</jvmArguments>
				</configuration>
			</plugin>

			<!-- JaCoCo for test coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>com/example/restapi/RestApiApplication.class</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.25</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
							<excludes>
								<exclude>com/example/restapi/config/**</exclude>
								<exclude>com/example/restapi/controller/**</exclude>
								<exclude>com/example/restapi/RestApiApplication*.*</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- CheckStyle for code quality -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.6.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnViolation>false</failOnViolation>
				</configuration>
			</plugin>

			<!-- JDepend for design quality metrics -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.1</version>
				<executions>
					<execution>
						<phase>verify</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- PMD for static code analysis -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.26.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnViolation>false</failOnViolation>
				</configuration>
			</plugin>

			<!-- Exclude performance tests from Surefire -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/RestApiApplicationTests.java</exclude>
						<exclude>**/integration/**</exclude>
						<exclude>**/performance/**</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.soebes.maven.plugins</groupId>
				<artifactId>doxygen-maven-plugin</artifactId>
				<version>1.1.0</version>
				<executions>
					<execution>
						<id>generate-doxygen-site</id>
						<phase>site</phase> <!-- important: run during site phase -->
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<configurationFile>${doxygen.config.file}</configurationFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.1</version>
				<executions>

					<!-- Copy Maven Site content into docs/site/ -->
					<execution>
						<id>copy-maven-site-to-docs</id>
						<phase>post-site</phase> <!-- After site generation -->
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/docs/site</outputDirectory> <!-- ðŸ”¥ target site folder -->
							<resources>
								<resource>
									<directory>${project.build.directory}/site</directory> <!-- source -->
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>

					<!-- Copy Doxygen content into docs/doxygen/ -->
					<execution>
						<id>copy-doxygen-site-to-docs</id>
						<phase>post-site</phase> <!-- After doxygen generation too -->
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/docs/doxygen</outputDirectory> <!-- ðŸ”¥ target doxygen folder -->
							<resources>
								<resource>
									<directory>${project.build.directory}/doxygen/html</directory> <!-- source -->
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>

				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>integration</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<includes>
								<include>**/integration/**</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>performance</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<includes>
								<include>**/performance/**</include>
							</includes>
						</configuration>
					</plugin>
					<!-- Copy the report into the site directory
					Use the maven-resources-plugin or maven-antrun-plugin to copy your generated report
					(perf-report.html) 
					from target/reports to the site output directory before site generation. 
					mvn -Pperformance resources:copy-resources@copy-perf-report
					-->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.3.1</version>
						<executions>
							<execution>
								<id>copy-perf-report</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/site/reports</outputDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}/reports</directory>
											<includes>
												<include>perf-report.html</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<reporting>
		<plugins>
			<!-- Checkstyle report for code quality -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.6.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- JDepend report for design quality metrics -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.1</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>generate</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- PMD report for static code analysis -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.26.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>pmd</report>
							<report>cpd</report> <!-- Copy-Paste Detector -->
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- JUnit report for passed tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>3.5.2</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>report-only</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- JaCoCo report for test coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>


</project>